//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.2.0
//     from Assets/MouseControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @MouseControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @MouseControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""MouseControls"",
    ""maps"": [
        {
            ""name"": ""Battle"",
            ""id"": ""7cceda7b-962e-457f-b1c4-a7d6d82d0dcb"",
            ""actions"": [
                {
                    ""name"": ""MousePan"",
                    ""type"": ""PassThrough"",
                    ""id"": ""5a5e0ddf-d8f5-4351-90e8-6bfb239066b0"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Zoom"",
                    ""type"": ""Value"",
                    ""id"": ""b37916a0-8e18-4104-83f3-e9486770a5d1"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": ""Normalize(min=-1,max=1),Clamp(min=-1,max=1),Invert"",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RotateClockwise"",
                    ""type"": ""Button"",
                    ""id"": ""0610202d-21cf-4740-812b-c8718196fff6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""KeyPan"",
                    ""type"": ""Value"",
                    ""id"": ""96f0a658-d066-4bd2-ae6b-6f374f859fee"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RotateAnticlockwise"",
                    ""type"": ""Value"",
                    ""id"": ""ae518f3f-15ec-4f0a-a5c3-2ddb7a787c2f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold(duration=1.401298E-45)"",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""KeyZoomIn"",
                    ""type"": ""Button"",
                    ""id"": ""5ae5f50f-0f89-4475-bcd1-d83cd007c84f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""KeyZoomOut"",
                    ""type"": ""Button"",
                    ""id"": ""315c9759-d8ee-41d7-a58a-5a44a6712fd5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RecenterOnActiveCharacter"",
                    ""type"": ""Button"",
                    ""id"": ""26234db7-24ce-43e4-97fb-eb063302e6ca"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""bc52853c-ff71-48ef-a7ec-e68da0ff60d5"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MousePan"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""97572b6c-0168-49be-8cf4-68d9b8fa3f31"",
                    ""path"": ""<Mouse>/scroll/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Zoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""c6ee4db4-4f2b-4440-ba78-85de69de9106"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""KeyPan"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""6769ec71-d289-446a-ab01-493422722d98"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""KeyPan"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""0e6db1e9-e6c3-4a59-96b1-30e557648b09"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""KeyPan"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""2f9376cd-07e7-488c-9a85-a0a62105a806"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""KeyPan"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""6ccc8041-7106-415d-b607-f603d68a71bb"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""KeyPan"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""8e86338e-9479-4bbc-a3eb-e27e0db11f23"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""KeyPan"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""e049afe7-6a82-42b7-bb5d-21720ecd403d"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""KeyPan"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""baecad95-ede3-4518-b02f-496f77eb97d1"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""KeyPan"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""4c3a7f3c-592f-4700-b7dc-8de0efd66fa4"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""KeyPan"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""4ed0ab5d-b1a8-4090-93a0-fcb5ac8d7d47"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""KeyPan"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""71cc52af-189f-4ea7-99a7-b288331f50ae"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": ""Hold(duration=1.401298E-45)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateClockwise"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""31cd9513-c11a-4d74-93e5-32ace3932f76"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateAnticlockwise"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2c5c2831-c87d-4faa-b85b-752a54000751"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""KeyZoomIn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""49f1e28a-9e86-4a82-807e-fccc224c1b78"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""KeyZoomOut"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""17737afe-2e42-4473-9c9d-f13f8705f5ce"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RecenterOnActiveCharacter"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Battle
        m_Battle = asset.FindActionMap("Battle", throwIfNotFound: true);
        m_Battle_MousePan = m_Battle.FindAction("MousePan", throwIfNotFound: true);
        m_Battle_Zoom = m_Battle.FindAction("Zoom", throwIfNotFound: true);
        m_Battle_RotateClockwise = m_Battle.FindAction("RotateClockwise", throwIfNotFound: true);
        m_Battle_KeyPan = m_Battle.FindAction("KeyPan", throwIfNotFound: true);
        m_Battle_RotateAnticlockwise = m_Battle.FindAction("RotateAnticlockwise", throwIfNotFound: true);
        m_Battle_KeyZoomIn = m_Battle.FindAction("KeyZoomIn", throwIfNotFound: true);
        m_Battle_KeyZoomOut = m_Battle.FindAction("KeyZoomOut", throwIfNotFound: true);
        m_Battle_RecenterOnActiveCharacter = m_Battle.FindAction("RecenterOnActiveCharacter", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Battle
    private readonly InputActionMap m_Battle;
    private IBattleActions m_BattleActionsCallbackInterface;
    private readonly InputAction m_Battle_MousePan;
    private readonly InputAction m_Battle_Zoom;
    private readonly InputAction m_Battle_RotateClockwise;
    private readonly InputAction m_Battle_KeyPan;
    private readonly InputAction m_Battle_RotateAnticlockwise;
    private readonly InputAction m_Battle_KeyZoomIn;
    private readonly InputAction m_Battle_KeyZoomOut;
    private readonly InputAction m_Battle_RecenterOnActiveCharacter;
    public struct BattleActions
    {
        private @MouseControls m_Wrapper;
        public BattleActions(@MouseControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @MousePan => m_Wrapper.m_Battle_MousePan;
        public InputAction @Zoom => m_Wrapper.m_Battle_Zoom;
        public InputAction @RotateClockwise => m_Wrapper.m_Battle_RotateClockwise;
        public InputAction @KeyPan => m_Wrapper.m_Battle_KeyPan;
        public InputAction @RotateAnticlockwise => m_Wrapper.m_Battle_RotateAnticlockwise;
        public InputAction @KeyZoomIn => m_Wrapper.m_Battle_KeyZoomIn;
        public InputAction @KeyZoomOut => m_Wrapper.m_Battle_KeyZoomOut;
        public InputAction @RecenterOnActiveCharacter => m_Wrapper.m_Battle_RecenterOnActiveCharacter;
        public InputActionMap Get() { return m_Wrapper.m_Battle; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BattleActions set) { return set.Get(); }
        public void SetCallbacks(IBattleActions instance)
        {
            if (m_Wrapper.m_BattleActionsCallbackInterface != null)
            {
                @MousePan.started -= m_Wrapper.m_BattleActionsCallbackInterface.OnMousePan;
                @MousePan.performed -= m_Wrapper.m_BattleActionsCallbackInterface.OnMousePan;
                @MousePan.canceled -= m_Wrapper.m_BattleActionsCallbackInterface.OnMousePan;
                @Zoom.started -= m_Wrapper.m_BattleActionsCallbackInterface.OnZoom;
                @Zoom.performed -= m_Wrapper.m_BattleActionsCallbackInterface.OnZoom;
                @Zoom.canceled -= m_Wrapper.m_BattleActionsCallbackInterface.OnZoom;
                @RotateClockwise.started -= m_Wrapper.m_BattleActionsCallbackInterface.OnRotateClockwise;
                @RotateClockwise.performed -= m_Wrapper.m_BattleActionsCallbackInterface.OnRotateClockwise;
                @RotateClockwise.canceled -= m_Wrapper.m_BattleActionsCallbackInterface.OnRotateClockwise;
                @KeyPan.started -= m_Wrapper.m_BattleActionsCallbackInterface.OnKeyPan;
                @KeyPan.performed -= m_Wrapper.m_BattleActionsCallbackInterface.OnKeyPan;
                @KeyPan.canceled -= m_Wrapper.m_BattleActionsCallbackInterface.OnKeyPan;
                @RotateAnticlockwise.started -= m_Wrapper.m_BattleActionsCallbackInterface.OnRotateAnticlockwise;
                @RotateAnticlockwise.performed -= m_Wrapper.m_BattleActionsCallbackInterface.OnRotateAnticlockwise;
                @RotateAnticlockwise.canceled -= m_Wrapper.m_BattleActionsCallbackInterface.OnRotateAnticlockwise;
                @KeyZoomIn.started -= m_Wrapper.m_BattleActionsCallbackInterface.OnKeyZoomIn;
                @KeyZoomIn.performed -= m_Wrapper.m_BattleActionsCallbackInterface.OnKeyZoomIn;
                @KeyZoomIn.canceled -= m_Wrapper.m_BattleActionsCallbackInterface.OnKeyZoomIn;
                @KeyZoomOut.started -= m_Wrapper.m_BattleActionsCallbackInterface.OnKeyZoomOut;
                @KeyZoomOut.performed -= m_Wrapper.m_BattleActionsCallbackInterface.OnKeyZoomOut;
                @KeyZoomOut.canceled -= m_Wrapper.m_BattleActionsCallbackInterface.OnKeyZoomOut;
                @RecenterOnActiveCharacter.started -= m_Wrapper.m_BattleActionsCallbackInterface.OnRecenterOnActiveCharacter;
                @RecenterOnActiveCharacter.performed -= m_Wrapper.m_BattleActionsCallbackInterface.OnRecenterOnActiveCharacter;
                @RecenterOnActiveCharacter.canceled -= m_Wrapper.m_BattleActionsCallbackInterface.OnRecenterOnActiveCharacter;
            }
            m_Wrapper.m_BattleActionsCallbackInterface = instance;
            if (instance != null)
            {
                @MousePan.started += instance.OnMousePan;
                @MousePan.performed += instance.OnMousePan;
                @MousePan.canceled += instance.OnMousePan;
                @Zoom.started += instance.OnZoom;
                @Zoom.performed += instance.OnZoom;
                @Zoom.canceled += instance.OnZoom;
                @RotateClockwise.started += instance.OnRotateClockwise;
                @RotateClockwise.performed += instance.OnRotateClockwise;
                @RotateClockwise.canceled += instance.OnRotateClockwise;
                @KeyPan.started += instance.OnKeyPan;
                @KeyPan.performed += instance.OnKeyPan;
                @KeyPan.canceled += instance.OnKeyPan;
                @RotateAnticlockwise.started += instance.OnRotateAnticlockwise;
                @RotateAnticlockwise.performed += instance.OnRotateAnticlockwise;
                @RotateAnticlockwise.canceled += instance.OnRotateAnticlockwise;
                @KeyZoomIn.started += instance.OnKeyZoomIn;
                @KeyZoomIn.performed += instance.OnKeyZoomIn;
                @KeyZoomIn.canceled += instance.OnKeyZoomIn;
                @KeyZoomOut.started += instance.OnKeyZoomOut;
                @KeyZoomOut.performed += instance.OnKeyZoomOut;
                @KeyZoomOut.canceled += instance.OnKeyZoomOut;
                @RecenterOnActiveCharacter.started += instance.OnRecenterOnActiveCharacter;
                @RecenterOnActiveCharacter.performed += instance.OnRecenterOnActiveCharacter;
                @RecenterOnActiveCharacter.canceled += instance.OnRecenterOnActiveCharacter;
            }
        }
    }
    public BattleActions @Battle => new BattleActions(this);
    public interface IBattleActions
    {
        void OnMousePan(InputAction.CallbackContext context);
        void OnZoom(InputAction.CallbackContext context);
        void OnRotateClockwise(InputAction.CallbackContext context);
        void OnKeyPan(InputAction.CallbackContext context);
        void OnRotateAnticlockwise(InputAction.CallbackContext context);
        void OnKeyZoomIn(InputAction.CallbackContext context);
        void OnKeyZoomOut(InputAction.CallbackContext context);
        void OnRecenterOnActiveCharacter(InputAction.CallbackContext context);
    }
}
